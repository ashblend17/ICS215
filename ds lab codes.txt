playfair-
m = [['0' for _ in range(5)] for _ in range(5)]
b="abcdefghiklmnopqrstuvwxyz"
c=list(b)
def removextra(a):
    for i in b:
        if i in a and i in c:
            c.remove(i)
    #print(c)
def makematrix(a):
    removextra(a)
    for i in range(5):
        for j in range(5):
            if 5*i+j>=len(a):
                #l=i
                #w=j
                break
            m[i][j]=a[5*i+j]
    #print(l,w)
    for i in range(5):
        for j in range(5):
            if m[i][j]=='0' and 5*i+j-len(a)<len(c):
                m[i][j]=c[5*i+j-len(a)]
def encrypt(a,k):
    w = []
    for i in range(0,len(a),2):
        if i<len(a)-1:
            w.append([a[i],a[i+1]])
        else:
            if len(a)%2==0:
                w.append([a[i],a[i+1]])
            else:
                w.append([a[i],'x'])
    #print(w)
    # Create the Playfair matrix from the key
    makematrix(k)
    encrypted_message = ""
    for pair in w:
        l,b = pair[0],pair[1]
        ai, aj, bi, bj = None, None, None, None
        for i in range(5):
            for j in range(5):
                if m[i][j] == l:
                    ai, aj = i, j
                elif m[i][j] == b:
                    bi, bj = i, j

        if ai is not None and bi is not None:
            # Characters are in the same row
            if ai == bi:
                aj = (aj + 1) % 5
                bj = (bj + 1) % 5
            # Characters are in the same column
            elif aj == bj:
                ai = (ai + 1) % 5
                bi = (bi + 1) % 5
            # Characters form a rectangle
            else:
                aj, bj = bj, aj

            encrypted_message += m[ai][aj] + m[bi][bj]
    #else:
    #encrypted_message += pair

    return encrypted_message
def decrypt(a,k):
    w = []
    for i in range(0,len(a),2):
        if i<len(a)-1:
            w.append([a[i],a[i+1]])
        else:
            if len(a)%2==0:
                w.append([a[i],a[i+1]])
            else:
                w.append([a[i],'x'])
    #print(w)
    # Create the Playfair matrix from the key
    makematrix(k)
    encrypted_message = ""
    for pair in w:
        l,b = pair[0],pair[1]
        ai, aj, bi, bj = None, None, None, None
        for i in range(5):
            for j in range(5):
                if m[i][j] == l:
                    ai, aj = i, j
                elif m[i][j] == b:
                    bi, bj = i, j

        if ai is not None and bi is not None:
            # Characters are in the same row
            if ai == bi:
                aj = (aj - 1) % 5
                bj = (bj - 1) % 5
            # Characters are in the same column
            elif aj == bj:
                ai = (ai - 1) % 5
                bi = (bi - 1) % 5
            # Characters form a rectangle
            else:
                aj, bj = bj, aj

            encrypted_message += m[ai][aj] + m[bi][bj] 
    return encrypted_message       

a=input()
k=input()
#print(b)
en=encrypt(a,k)
de=decrypt(en,k)
print(en)
print(de)




2.vignere cipher
c="abcdefghijklmnopqrstuvwxyz"
def encrypt(a,k):
    m=""
    for i in range(len(a)):
        m+=c[(c.index(a[i])+c.index(k[i]))%26]
    return m
def decrypt(a,k):
    m=""
    for i in range(len(a)):
        m+=c[(c.index(a[i])-c.index(k[i]))%26]
    return m
a=input()
k=input()
while len(k)<=len(a):
    k=k+k
e=encrypt(a,k)
print(e)
d=decrypt(e,k)
print(d)




3.Transposition

def encrypt_transposition(message, key):
    message = message.replace(" ", "").upper()
    num_columns = len(key)
    num_rows = -(-len(message) // num_columns)
    grid = [['' for _ in range(num_columns)] for _ in range(num_rows)]
    index = 0
    for row in range(num_rows):
        for col in range(num_columns):
            if index < len(message):
                grid[row][col] = message[index]
                index += 1
    key_order = list(key)
    key_order.sort() 
    encrypted_message = ''
    for col in key_order:
        current_col = key.index(col)
        for row in range(num_rows):
            encrypted_message += grid[row][current_col]

    return encrypted_message

message = "This is a secret message"
key = "GERMAN"
encrypted_message = encrypt_transposition(message, key)
print(encrypted_message)

3..additive cipher
#include<bits/stdc++.h>
using namespace std;
char b[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
int getindex(char c)
{
    for(int i=0;i<26;i++)
    {
        if(c==b[i])
        return i;
    }
} 
int main()
{
    int i,k,j;
    string a;
    cin>>a;
    cin>>k;
    for(i=0;i<a.size();i++)
    {
        j=getindex(a[i]);
        cout<<b[(j+k)%26];
    }
}



4..multiplicative cipher
a=eval(input())
k=int(input())
l=list()
m=list()
b="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
def inv(t):
    for i in range(1,26):
        flag=(i*t)%26
        if flag==1:
            return i
    return -1
def encrypt(a):
    for i in a:
        c=b.index(i)
        c=(k*c)%26
        l.append(b[c])
    for i in l:
        print(i,end="")
def decrypt(a):
    for i in a:
        c=b.index(i)
        c=(c*inv(k))%26
        m.append(b[c])
    for i in m:
        print(i,end="")
encrypt(a)
s=""
for i in l:
    s.join(l)
decrypt(s)


5..Klee

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,x,y;
    cout<<"Enter number of points :";
    cin>>n;
    vector<pair<int,int>>m;
    for(int i=1;i<=n;i++)
    {
        cout<<"x coordinate :";
        cin>>x;
        cout<<"y coordinate :";
        cin>>y;
        m.push_back({x,y});
    }
    vector<pair<int,bool>>point;
    for(int i=0;i<m.size();i++)
    {
        point.push_back({m[i].first,false});
        point.push_back({m[i].second,true});
    }
    sort(point.begin(),point.end());
    int result=0;
    int count=0;
    for(int i=0;i<point.size()-1;i++)
    {
        if(point[i].second==false)
        count++;
        else if(point[i].second==true)
        count--;
        if(count>0)
        {
            result+=point[i+1].first-point[i].first;
        }
    }
    cout<<"Total distance :"<<result<<endl;
}




6..Manhattan dist of atleast n
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int m;
    cout<<"Enter Manhattan distance :";
    cin>>m;
    if(m%2==0)
    cout<<"Points are :"<<"(0,0)"<<"(0,"<<m<<"),("<<m<<",0),("<<m<<","<<m<<"),("<<m/2<<","<<m/2<<")";
    else
    cout<<"Points are :"<<"(0,0)"<<"(0,"<<m<<"),("<<m<<",0),("<<m<<","<<m<<")";
}


7..Maximum manhattan distance
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,x,y;
    cout<<"Enter number of points :";
    cin>>n;
    vector<pair<int,int>>points;
    for(int i=1;i<=n;i++)
    {
        cout<<"Enter x coordinate :";
        cin>>x;
        cout<<"Enter y coordinate :";
        cin>>y;
        points.push_back({x,y});
    }
    vector<int>sum;
    vector<int>diff;
    for(int i=0;i<n;i++)
    {
        sum.push_back(points[i].first+points[i].second);
        diff.push_back(points[i].first-points[i].second);
    }
    sort(sum.begin(),sum.end());
    sort(diff.begin(),diff.end());
    cout<<"Maximum Manhattan Distance is :"<<max(sum[n-1]-sum[0],diff[n-1]-diff[0]);
}



8..rightmost set bit
import math
n=int(input())
print(int(math.log2(n&-n))+1)

9..Same euclidian and manhattan distance
#include<bits/stdc++.h>
using namespace std;
int fact(int a)
{
    int i,p=1;
    for(i=1;i<=a;i++)
    p=p*i;
    return p;
}
int C(int a,int b)
{
    return fact(a)/(fact(a-b)*fact(b));
}
int main()
{
    int n,x,y;
    pair<int,int>p;
    map<int,int>X;
    map<int,int>Y;
    map<pair<int,int>,int>XY;
    vector<pair<int,int>>points;
    cout<<"Enter number of points :";
    cin>>n;
    cout<<"Enter points :\n";
    for (int i=1;i<=n;i++)
    {
        cout<<"Enter x coordinate :";
        cin>>x;
        cout<<"Enter y coordinate :";
        cin>>y;
        points.push_back({x,y});
    }
    for(int i=0;i<n;i++)
    {
        X[points[i].first]++;
        Y[points[i].second]++;
        XY[points[i]]++;
    }
   int xRes=0,yRes=0,xyRes=0;
    for (auto i:X){
        int xFreq = i.second;
        int sameX = C(xFreq,2);
        xRes += sameX;
    }

    for (auto i:Y){
        int yFreq = i.second;
        int sameY = C(yFreq,2);
        yRes += sameY;
    }

     for (auto i:XY){
        int xyFreq = i.second;
        int sameXY = C(xyFreq,2);
        xyRes += sameXY;
    }
   cout<<"Result: "<<xRes+ yRes -(2*xyRes);
}

10.Sum of manhattan distance
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,x,y,i;
    vector<int>X;
    vector<int>Y;
    cout<<"Enter number of coordinates :";
    cin>>n;
    for(i=1;i<=n;i++)
    {
        cout<<"Enter x coordinate :";
        cin>>x;
        cout<<"Enter y coordinate :";
        cin>>y;
        X.push_back(x);
        Y.push_back(y);
    }
    sort(X.begin(),X.end());
    sort(Y.begin(),Y.end());
    int sx=0,sy=0,rx=0,ry=0;
    for(i=0;i<=n-1;i++)
    {
        rx=rx+X[i]*i-sx;
        sx=sx+X[i];
        ry=ry+Y[i]*i-sy;
        sy=sy+Y[i];
    }
    cout<<"Sum of Manhattan distance :"<<rx+ry;
}

11..To find a point from which manhattan distance is minimum
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,k;
    cout<<"Enter number of points :";
    cin>>n;
    cout<<"Enter the dimension :";
    cin>>k;
    vector<vector<int>>points(n,vector<int>(k));
    cout<<"Enter points (all x coordinates of points first then all y coordinates):";
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<k;j++)
        {
            cin>>points[i][j];
        }
    }
    for(int i=0;i<k;i++)
    sort(points[i].begin(), points[i].end());
    for (int i=0;i<k;++i)
    cout<<points[i][(ceil((double)n/2)-1)]<<" ";
}

12.hill cipher
import numpy as np
c="abcdefghijklmnopqrstuvwxyz"
a=input()
k=input()
l = [[0] * len(a) for _ in range(len(a))]
m = [[0] * 1 for _ in range(len(a))]
ans = [[0] * 1 for _ in range(len(a))]
ansi = np.zeros((len(a), 1))
#arr=np.array(l)
#inverse=np.linalg.pinv(arr)
def determinant_3x3(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]

    return (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g))%26
def transpose(matrix):
    return [[matrix[j][i] for j in range(3)] for i in range(3)]

def adjugate(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]

    return [
        [(e * i - f * h)%26, -(b * i - c * h)%26, (b * f - c * e)%26],
        [-(d * i - f * g)%26, (a * i - c * g)%26, -(a * f - c * d)%26],
        [(d * h - e * g)%26, -(a * h - b * g)%26, (a * e - b * d)%26]
    ]

def matrix_inverse_3x3(matrix):
    det = determinant_3x3(matrix)
    #inv_det = 1.0 / det
    adj = adjugate(matrix)
    inverse_matrix = [[det * adj[i][j] for j in range(3)] for i in range(3)]
    return inverse_matrix

def createkeymatrix(k):
    o=0
    for i in range(len(a)):
        for j in range(len(a)):
            if o<len(k):
                l[i][j]=c.index(k[o])
            o+=1
def createinputmatrix(a):
    o=0
    for i in range(len(a)):
        for j in range(1):
            if o<len(a):
                m[i][j]=c.index(a[o])
            o+=1
def multiply():
    for i in range(len(a)):
        for j in range(len(m[0])):
            ans[i][j]=0
            for r in range(len(a)):
                ans[i][j]+=l[i][r]*m[r][j]
def multiplyinv(s):
    #print(s)
    for i in range(len(a)):
        for j in range(len(m[0])):
            ansi[i][j]=0
            for r in range(len(a)):
                ansi[i][j]+=s[i][r]*(ans[r][j]%26)
    #print(ansi)
def encrypt(a,k):
    mes=""
    createkeymatrix(k)
    createinputmatrix(a)
    multiply()
    for i in range(len(ans)):
        for j in range(len(ans[0])):
            mes+=c[ans[i][j]%26]
    return mes
def decrypt():
    mes=""
    s=matrix_inverse_3x3(l)
    multiplyinv(s)
    for i in range(len(ans)):
        for j in range(len(ans[0])):
            mes+=c[int(ansi[i][j])%26]
    return mes
mess=encrypt(a,k)
de=decrypt()
print(mess)
#print(l)
#print(np.linalg.inv(np.array(l)))
#print(ansi)
print(de)

